services:
  postgresql:
    image: timescale/timescaledb-ha:pg14-ts2.14-oss
    env_file:
      - env.d/postgresql
      - env.d/api
      - env.d/metabase
    healthcheck:
      test:
        - "CMD-SHELL"
        - "pg_isready"
        - "-d"
        - "$${QUALICHARGE_DB_NAME}"
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./src/api
      args:
        DOCKER_UID: ${DOCKER_UID:-1000}
        DOCKER_GID: ${DOCKER_GID:-1000}
    user: ${DOCKER_USER:-1000}
    image: "qualicharge:api"
    ports:
      - "8010:8000"
    env_file:
      - env.d/api
    healthcheck:
      test:
        - "CMD"
        - "pipenv"
        - "run"
        - "httpx"
        - "http://localhost:8000/api/v1/docs"
      interval: 3s
      timeout: 2s
      retries: 5
    restart: always
    volumes:
      - ./src/api:/app
      - ./data:/data
    depends_on:
      - postgresql

  client:
    build:
      context: ./src/client
      args:
        DOCKER_BUILDKIT: 1
        DOCKER_UID: ${DOCKER_UID:-1000}
        DOCKER_GID: ${DOCKER_GID:-1000}
    user: ${DOCKER_USER:-1000}
    image: "qualicharge:client"
    env_file:
      - env.d/client
    volumes:
      - ./src/client:/app

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    env_file:
      - env.d/keycloak
    command: start-dev
    ports:
      - "8080:8080"
    volumes:
      - ./bin/kc-init:/usr/local/bin/kc-init

  metabase:
    image: metabase/metabase:v0.50.27
    ports:
      - 3000:3000
    env_file:
      - env.d/metabase
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "--fail"
        - "-I"
        - "http://localhost:3000/api/health"
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      - postgresql

  notebook:
    build:
      context: .
      dockerfile: src/notebook/Dockerfile
    user: ${DOCKER_USER:-1000}
    environment:
      NB_UID: ${DOCKER_UID:-1000}
      NB_GID: ${DOCKER_GID:-1000}
      CHOWN_HOME: 'yes'
      CHOWN_HOME_OPTS: -R
    env_file:
      - env.d/notebook
    ports:
      - 8888:8888
    volumes:
      - .:/home/jovyan/work
    depends_on:
      - postgresql

  opendata:
    build:
      context: ./src/opendata
      args:
        DOCKER_UID: ${DOCKER_UID:-1000}
        DOCKER_GID: ${DOCKER_GID:-1000}
    user: ${DOCKER_USER:-1000}
    image: "qualicharge:opendata"
    ports:
      - "8020:8000"
    env_file:
      - env.d/opendata
    volumes:
      - ./src/opendata:/app
    depends_on:
      - postgresql

  # -- tools
  curl:
    image: curlimages/curl:8.10.0
    user: ${DOCKER_USER:-1000}
    env_file:
      - env.d/metabase
    volumes:
      - .:/work

  dockerize:
    image: jwilder/dockerize

  jq:
    # There is no other tags than latest
    image: ddev/ddev-utilities:latest
    entrypoint: jq
    env_file:
      - env.d/metabase

  terraform:
    image: hashicorp/terraform:1.9.5
    env_file:
      - env.d/terraform
    user: ${DOCKER_USER:-1000}
    working_dir: /home/terraform
    volumes:
      - ./provisioning:/home/terraform
