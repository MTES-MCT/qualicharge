[tool.poetry]
name = "qualicharge-client"
version = "0.1.0"
description = "A python client and CLI for the QualiCharge API"
authors = ["Julien Maupetit <julien@maupetit.net>"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "qcc" },
]

[tool.poetry.dependencies]
anyio = {extras = ["trio"], version = "^4.4.0"}
httpx = "^0.27.0"
pydantic = "^2.7.3"
pydantic-settings = "^2.3.0"
python = "^3.10"
typer = "^0.12.3"

[tool.poetry.group.dev.dependencies]
black = "^24.4.2"
mypy = "^1.10.0"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-httpx = "^0.30.0"
ruff = "^0.4.7"

[tool.poetry.scripts]
qcc = "qcc.__main__:app"

# Third party packages configuration
[tool.pytest.ini_options]
addopts = "-v --cov-report term-missing --cov=qcc"
python_files = [
    "test_*.py",
    "tests.py",
]
testpaths = [
    "tests",
]

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "F",  # Pyflakes
    "I",  # Isort
    "ISC",  # flake8-implicit-str-concat
    "PLC",  # Pylint Convention
    "PLE",  # Pylint Error
    "PLR",  # Pylint Refactor
    "PLW",  # Pylint Warning
    "RUF100",  # Ruff unused-noqa
    "S",  # flake8-bandit
    "T20", # flake8-print
    "W",  # pycodestyle warning
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # use of assert
]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.mypy]
plugins = "pydantic.mypy"
files = "./**/*.py"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
