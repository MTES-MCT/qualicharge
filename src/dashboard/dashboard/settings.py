"""Django settings for dashboard project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

import environ
import sentry_sdk
from django.utils.translation import gettext_lazy as _
from sentry_sdk.integrations.django import DjangoIntegration

# is pytest running
TEST = os.environ.get("TEST", False)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# django-environ integration
env = environ.Env(
    DASHBOARD_DEBUG=(bool, False),
    DASHBOARD_ALLOWED_HOSTS=(list, ["localhost"]),
    DASHBOARD_SENTRY_DSN=(str, ""),
    DASHBOARD_SENTRY_TRACES_SAMPLE_RATE=(float, 1.0),
    DASHBOARD_SENTRY_PROFILES_SAMPLE_RATE=(float, 1.0),
)
env.prefix = "DASHBOARD_"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.str("DEBUG")

#'DASHBOARD_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "mozilla_django_oidc",
    "widget_tweaks",
    "dsfr",
    "anymail",
    "dashboard",
    "apps",
    "apps.auth",
    "apps.core",
    "apps.home",
    "apps.consent",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "apps.auth.middleware.DashboardLoginRequiredMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "dashboard.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "dsfr.context_processors.site_config",
                "apps.core.context_processors.contact_email",
            ],
        },
    },
]

WSGI_APPLICATION = "dashboard.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    # read os.environ['DATABASE_URL'] and raises
    # ImproperlyConfigured exception if not found
    #
    # The db() method is an alias for db_url().
    "default": env.db("DATABASE_URL"),
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "fr"
LANGUAGES = [
    ("fr", _("French")),
]
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True
PREFIX_DEFAULT_LANGUAGE = False
LOCALE_PATHS = [BASE_DIR / "locale"]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR.parent / "static"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Authentication
AUTH_USER_MODEL = "qcd_auth.DashboardUser"

AUTHENTICATION_BACKENDS = (
    "apps.auth.backends.OIDCAuthenticationBackend",
    "django.contrib.auth.backends.ModelBackend",
)
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"


# Connection to “Pro Connect” (OIDC)
OIDC_RP_SIGN_ALGO = "RS256"
OIDC_RP_CLIENT_ID = env.str("PROCONNECT_CLIENT_ID")
OIDC_RP_CLIENT_SECRET = env.str("PROCONNECT_CLIENT_SECRET")

OIDC_OP_AUTHORIZATION_ENDPOINT = env.str("PROCONNECT_AUTHORIZATION_ENDPOINT")
OIDC_OP_TOKEN_ENDPOINT = env.str("PROCONNECT_TOKEN_ENDPOINT")
OIDC_OP_USER_ENDPOINT = env.str("PROCONNECT_USER_ENDPOINT")
OIDC_OP_JWKS_ENDPOINT = env.str("PROCONNECT_JWKS_ENDPOINT")
OIDC_OP_LOGOUT_ENDPOINT = env.str("PROCONNECT_SESSION_END")

OIDC_RP_SCOPES = "openid email given_name usual_name uid siret"
OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = 60 * 60
OIDC_STORE_ID_TOKEN = True
ALLOW_LOGOUT_GET_METHOD = True

# if True, a new user created via ProConnect will be automatically attached to
# the entity corresponding to their SIRET.
PROCONNECT_ATTACH_USER_ON_CREATION = False

# Sentry
sentry_sdk.init(
    dsn=env.str("SENTRY_DSN"),
    integrations=[DjangoIntegration()],
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=env.float("SENTRY_TRACES_SAMPLE_RATE"),
    # To set a uniform sample rate
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production
    profiles_sample_rate=env.float("SENTRY_PROFILES_SAMPLE_RATE"),
    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
)


## Consent app

# CONSENT_NUMBER_DAYS_END_DATE allows to calculate the end date of a consent period by
# adding a number of days to the current date.
# If the value is None, the end date of the period will correspond to the last day of
# the current year
# More details on the calculation in the function: `utils.consent_end_date()`
# ie:
# CONSENT_NUMBER_DAYS_END_DATE = 90 will return the current date + 90 days.
# CONSENT_NUMBER_DAYS_END_DATE = None will return 2024-12-31 23:59:59 (if calculated
# during the year 2024).
CONSENT_NUMBER_DAYS_END_DATE = None

# `Control authority` contact for consent validation.
CONSENT_CONTROL_AUTHORITY = {
    "name": env.str("CONTROL_AUTHORITY_NAME"),
    "address_1": env.str("CONTROL_AUTHORITY_ADDRESS_1"),
    "address_2": env.str("CONTROL_AUTHORITY_ADDRESS_2", default=""),
    "zip_code": env.str("CONTROL_AUTHORITY_ZIP_CODE"),
    "city": env.str("CONTROL_AUTHORITY_CITY"),
    "represented_by": env.str("CONTROL_AUTHORITY_REPRESENTED_BY"),
    "email": env.str("CONTROL_AUTHORITY_EMAIL"),
}

CONSENT_SIGNATURE_LOCATION = env.str("CONSENT_SIGNATURE_LOCATION")


## EMAIL

# Email to contact the QualiCharge team
CONTACT_EMAIL = env.str("CONTACT_EMAIL")

# Configuration of Anymail for Brevo
EMAIL_BACKEND = "anymail.backends.sendinblue.EmailBackend"
ANYMAIL = {
    "SENDINBLUE_API_KEY": env.str("BREVO_API_KEY"),
}
DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL")

# Email configuration for the dashboard emails.
# - Please add a configuration for each type of email to be sent.
# - `template_id` refers to the ID of the template from Brevo.
DASHBOARD_EMAIL_CONFIGS = {
    # Configuration for the notification email sent to the user when
    # they validate their consents.
    "consent_validation": {
        "template_id": env.int("CONSENT_VALIDATION_TEMPLATE_ID"),
        "link": env.str("DOMAIN"),
    },
    # Configuration for the notification email sent to the user when
    # the user has been validated by an admin.
    "validated_user": {
        "template_id": env.int("VALIDATED_USER_TEMPLATE_ID"),
        "link": env.str("DOMAIN"),
    },
}

# API Annuaire des Entreprises
ANNUAIRE_ENTREPRISE_API_ROOT_URL = env.str("ANNUAIRE_ENTREPRISE_API_ROOT_URL")
ANNUAIRE_ENTREPRISE_API_TOKEN = env.str("ANNUAIRE_ENTREPRISE_API_TOKEN")
# Request timeout in seconds
ANNUAIRE_ENTREPRISE_API_TIMEOUT = env.int("ANNUAIRE_ENTREPRISE_API_TIMEOUT")

# Traceability parameters
# Allows to build the GET parameter of the query. Values must be formatted accordingly.
# - context: context in which the request is sent
# - object: the procedure identifier.
# - recipient: SIRET of the public organization authorized to use the data.
# https://entreprise.api.gouv.fr/developpeurs#renseigner-les-paramètres-dappel-et-de-traçabilité
ANNUAIRE_ENTREPRISE_API_CONTEXT = {
    "context": f"{'test-' if DEBUG else ''}monitoring-energy-policy-implementation",
    "object": f"{'test-' if DEBUG else ''}QualiCharge-company-infos",
    "recipient": "12008701000068",  # DGEC Siret
}

## Debug-toolbar

# Despite the `DEBUG` being set to `False`, for some tests,
# pytest seems to consider `DEBUG` to be `True`.
# So, if `pytest` is running, we don't activate `debug_toolbar`.
if DEBUG and not TEST:
    INTERNAL_IPS = ("localhost",)
    INSTALLED_APPS += ("debug_toolbar",)

    def show_toolbar(request):
        """Force display of debug toolbar.

        The default use `SHOW_TOOLBAR_CALLBACK` has no effect.
        `SHOW_TOOLBAR_CALLBACK` checks if `DEBUG` is `True` and if the `IP` of the
        request is in `INTERNAL_IPS` but without effect here.
        (https://django-debug-toolbar.readthedocs.io/en/latest/configuration.html#debug-toolbar-config).
        """
        return True

    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": show_toolbar,
        "INTERCEPT_REDIRECTS": False,
    }

    DEBUG_TOOLBAR_PANELS = (
        "debug_toolbar.panels.history.HistoryPanel",
        "debug_toolbar.panels.versions.VersionsPanel",
        "debug_toolbar.panels.timer.TimerPanel",
        "debug_toolbar.panels.settings.SettingsPanel",
        "debug_toolbar.panels.headers.HeadersPanel",
        "debug_toolbar.panels.request.RequestPanel",
        "debug_toolbar.panels.sql.SQLPanel",
        "debug_toolbar.panels.staticfiles.StaticFilesPanel",
        "debug_toolbar.panels.templates.TemplatesPanel",
        "debug_toolbar.panels.alerts.AlertsPanel",
        "debug_toolbar.panels.cache.CachePanel",
        "debug_toolbar.panels.signals.SignalsPanel",
        "debug_toolbar.panels.redirects.RedirectsPanel",
        "debug_toolbar.panels.profiling.ProfilingPanel",
    )

    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        *MIDDLEWARE,
    ]
