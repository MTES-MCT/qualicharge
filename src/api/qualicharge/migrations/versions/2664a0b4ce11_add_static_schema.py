"""add static schema

Revision ID: 2664a0b4ce11
Revises:
Create Date: 2024-04-23 14:51:04.993896

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
import sqlmodel
from alembic import op


# revision identifiers, used by Alembic.
revision: str = "2664a0b4ce11"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "amenageur",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("nom_amenageur", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("siren_amenageur", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("contact_amenageur", sa.String(), nullable=True),
        sa.CheckConstraint("created_at <= updated_at", name="pre-creation-update"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("nom_amenageur", "siren_amenageur", "contact_amenageur"),
    )
    op.create_table(
        "enseigne",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("nom_enseigne", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.CheckConstraint("created_at <= updated_at", name="pre-creation-update"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("nom_enseigne"),
    )
    op.create_table(
        "localisation",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "adresse_station", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "code_insee_commune", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "coordonneesXY",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.CheckConstraint("created_at <= updated_at", name="pre-creation-update"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("adresse_station", "coordonneesXY"),
    )
    op.create_table(
        "operateur",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("nom_operateur", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("contact_operateur", sa.String(), nullable=False),
        sa.Column(
            "telephone_operateur", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.CheckConstraint("created_at <= updated_at", name="pre-creation-update"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "nom_operateur", "contact_operateur", "telephone_operateur"
        ),
    )
    op.create_table(
        "station",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "id_station_itinerance", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "id_station_local", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("nom_station", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "implantation_station",
            sa.Enum(
                "VOIRIE",
                "PARKING_PUBLIC",
                "PARKING_PRIVE_USAGE_PUBLIC",
                "PARKING_PRIVE_CLIENTELE",
                "STATION_RECHARGE_RAPIDE",
                name="implantationstationenum",
            ),
            nullable=False,
        ),
        sa.Column("nbre_pdc", sa.Integer(), nullable=False),
        sa.Column(
            "condition_acces",
            sa.Enum("ACCESS_LIBRE", "ACCESS_RESERVE", name="conditionaccesenum"),
            nullable=False,
        ),
        sa.Column("horaires", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("station_deux_roues", sa.Boolean(), nullable=False),
        sa.Column(
            "raccordement",
            sa.Enum("DIRECT", "INDIRECT", name="raccordementemum"),
            nullable=True,
        ),
        sa.Column("num_pdl", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("date_maj", sa.DateTime(), nullable=False),
        sa.Column("date_mise_en_service", sa.DateTime(), nullable=True),
        sa.Column("amenageur_id", sa.Uuid(), nullable=True),
        sa.Column("operateur_id", sa.Uuid(), nullable=True),
        sa.Column("enseigne_id", sa.Uuid(), nullable=True),
        sa.Column("localisation_id", sa.Uuid(), nullable=True),
        sa.CheckConstraint("created_at <= updated_at", name="pre-creation-update"),
        sa.ForeignKeyConstraint(
            ["amenageur_id"],
            ["amenageur.id"],
        ),
        sa.ForeignKeyConstraint(
            ["enseigne_id"],
            ["enseigne.id"],
        ),
        sa.ForeignKeyConstraint(
            ["localisation_id"],
            ["localisation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["operateur_id"],
            ["operateur.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_station_id_station_itinerance"),
        "station",
        ["id_station_itinerance"],
        unique=True,
    )
    op.create_table(
        "pointdecharge",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "id_pdc_itinerance", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("id_pdc_local", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("puissance_nominale", sa.Float(), nullable=False),
        sa.Column("prise_type_ef", sa.Boolean(), nullable=False),
        sa.Column("prise_type_2", sa.Boolean(), nullable=False),
        sa.Column("prise_type_combo_ccs", sa.Boolean(), nullable=False),
        sa.Column("prise_type_chademo", sa.Boolean(), nullable=False),
        sa.Column("prise_type_autre", sa.Boolean(), nullable=False),
        sa.Column("gratuit", sa.Boolean(), nullable=True),
        sa.Column("paiement_acte", sa.Boolean(), nullable=False),
        sa.Column("paiement_cb", sa.Boolean(), nullable=True),
        sa.Column("paiement_autre", sa.Boolean(), nullable=True),
        sa.Column("tarification", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("reservation", sa.Boolean(), nullable=False),
        sa.Column(
            "accessibilite_pmr",
            sa.Enum(
                "RESERVE_PMR",
                "NON_RESERVE",
                "NON_ACCESSIBLE",
                "INCONNUE",
                name="accessibilitepmrenum",
            ),
            nullable=False,
        ),
        sa.Column(
            "restriction_gabarit", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("observations", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("cable_t2_attache", sa.Boolean(), nullable=True),
        sa.Column("station_id", sa.Uuid(), nullable=True),
        sa.CheckConstraint("created_at <= updated_at", name="pre-creation-update"),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["station.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_pointdecharge_id_pdc_itinerance"),
        "pointdecharge",
        ["id_pdc_itinerance"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_pointdecharge_id_pdc_itinerance"), table_name="pointdecharge"
    )
    op.drop_table("pointdecharge")
    op.drop_index(op.f("ix_station_id_station_itinerance"), table_name="station")
    op.drop_table("station")
    op.drop_table("operateur")
    op.drop_index(
        "idx_localisation_coordonneesXY",
        table_name="localisation",
        postgresql_using="gist",
    )
    op.drop_table("localisation")
    op.drop_table("enseigne")
    op.drop_table("amenageur")
    # ### end Alembic commands ###
