"""add auditability

Revision ID: 86b08ec6e6d1
Revises: 6e610f62bcc6
Create Date: 2024-10-16 17:03:58.431420

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = '86b08ec6e6d1'
down_revision: Union[str, None] = '6e610f62bcc6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('table', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('author_id', sa.Uuid(), nullable=False),
    sa.Column('target_id', sa.Uuid(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('changes', sa.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('amenageur', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('amenageur', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'amenageur', 'user', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'amenageur', 'user', ['updated_by_id'], ['id'])
    op.add_column('city', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('city', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'city', 'user', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'city', 'user', ['updated_by_id'], ['id'])
    op.add_column('department', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('department', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'department', 'user', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'department', 'user', ['created_by_id'], ['id'])
    op.add_column('enseigne', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('enseigne', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'enseigne', 'user', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'enseigne', 'user', ['updated_by_id'], ['id'])
    op.add_column('epci', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('epci', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'epci', 'user', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'epci', 'user', ['updated_by_id'], ['id'])
    op.add_column('group', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('group', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'group', 'user', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'group', 'user', ['updated_by_id'], ['id'])
    op.add_column('localisation', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('localisation', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'localisation', 'user', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'localisation', 'user', ['created_by_id'], ['id'])
    op.add_column('operateur', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('operateur', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'operateur', 'user', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'operateur', 'user', ['updated_by_id'], ['id'])
    op.add_column('operationalunit', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('operationalunit', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'operationalunit', 'user', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'operationalunit', 'user', ['created_by_id'], ['id'])
    op.add_column('pointdecharge', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('pointdecharge', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'pointdecharge', 'user', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'pointdecharge', 'user', ['updated_by_id'], ['id'])
    op.add_column('region', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('region', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'region', 'user', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'region', 'user', ['created_by_id'], ['id'])
    op.add_column('session', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('session', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'session', 'user', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'session', 'user', ['created_by_id'], ['id'])
    op.add_column('station', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('station', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'station', 'user', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'station', 'user', ['created_by_id'], ['id'])
    op.add_column('status', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('status', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'status', 'user', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'status', 'user', ['updated_by_id'], ['id'])
    op.add_column('user', sa.Column('created_by_id', sa.Uuid(), nullable=True))
    op.add_column('user', sa.Column('updated_by_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(None, 'user', 'user', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'user', 'user', ['updated_by_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user', type_='foreignkey')
    op.drop_constraint(None, 'user', type_='foreignkey')
    op.drop_column('user', 'updated_by_id')
    op.drop_column('user', 'created_by_id')
    op.drop_constraint(None, 'status', type_='foreignkey')
    op.drop_constraint(None, 'status', type_='foreignkey')
    op.drop_column('status', 'updated_by_id')
    op.drop_column('status', 'created_by_id')
    op.drop_constraint(None, 'station', type_='foreignkey')
    op.drop_constraint(None, 'station', type_='foreignkey')
    op.drop_column('station', 'updated_by_id')
    op.drop_column('station', 'created_by_id')
    op.drop_constraint(None, 'session', type_='foreignkey')
    op.drop_constraint(None, 'session', type_='foreignkey')
    op.drop_column('session', 'updated_by_id')
    op.drop_column('session', 'created_by_id')
    op.drop_constraint(None, 'region', type_='foreignkey')
    op.drop_constraint(None, 'region', type_='foreignkey')
    op.drop_column('region', 'updated_by_id')
    op.drop_column('region', 'created_by_id')
    op.drop_constraint(None, 'pointdecharge', type_='foreignkey')
    op.drop_constraint(None, 'pointdecharge', type_='foreignkey')
    op.drop_column('pointdecharge', 'updated_by_id')
    op.drop_column('pointdecharge', 'created_by_id')
    op.drop_constraint(None, 'operationalunit', type_='foreignkey')
    op.drop_constraint(None, 'operationalunit', type_='foreignkey')
    op.drop_column('operationalunit', 'updated_by_id')
    op.drop_column('operationalunit', 'created_by_id')
    op.drop_constraint(None, 'operateur', type_='foreignkey')
    op.drop_constraint(None, 'operateur', type_='foreignkey')
    op.drop_column('operateur', 'updated_by_id')
    op.drop_column('operateur', 'created_by_id')
    op.drop_constraint(None, 'localisation', type_='foreignkey')
    op.drop_constraint(None, 'localisation', type_='foreignkey')
    op.drop_column('localisation', 'updated_by_id')
    op.drop_column('localisation', 'created_by_id')
    op.drop_constraint(None, 'group', type_='foreignkey')
    op.drop_constraint(None, 'group', type_='foreignkey')
    op.drop_column('group', 'updated_by_id')
    op.drop_column('group', 'created_by_id')
    op.drop_constraint(None, 'epci', type_='foreignkey')
    op.drop_constraint(None, 'epci', type_='foreignkey')
    op.drop_column('epci', 'updated_by_id')
    op.drop_column('epci', 'created_by_id')
    op.drop_constraint(None, 'enseigne', type_='foreignkey')
    op.drop_constraint(None, 'enseigne', type_='foreignkey')
    op.drop_column('enseigne', 'updated_by_id')
    op.drop_column('enseigne', 'created_by_id')
    op.drop_constraint(None, 'department', type_='foreignkey')
    op.drop_constraint(None, 'department', type_='foreignkey')
    op.drop_column('department', 'updated_by_id')
    op.drop_column('department', 'created_by_id')
    op.drop_constraint(None, 'city', type_='foreignkey')
    op.drop_constraint(None, 'city', type_='foreignkey')
    op.drop_column('city', 'updated_by_id')
    op.drop_column('city', 'created_by_id')
    op.drop_constraint(None, 'amenageur', type_='foreignkey')
    op.drop_constraint(None, 'amenageur', type_='foreignkey')
    op.drop_column('amenageur', 'updated_by_id')
    op.drop_column('amenageur', 'created_by_id')
    op.drop_table('audit')
    # ### end Alembic commands ###
