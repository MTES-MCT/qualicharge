"""Add auditability

Revision ID: 37189f57d370
Revises: 4b99d15436b0
Create Date: 2025-01-31 13:25:01.549055

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from postgresql_audit.base import versioning_manager
from sqlalchemy import MetaData
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import declarative_base
from sqlmodel import SQLModel

from qualicharge.auth.schemas import User, Group
from qualicharge.schemas import core

# revision identifiers, used by Alembic.
revision: str = "37189f57d370"
down_revision: Union[str, None] = "4b99d15436b0"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def get_tables(connection):
    """Get SQLAlchemy tables."""
    metadata = MetaData()
    metadata.reflect(bind=connection)
    return metadata.tables


def upgrade() -> None:
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "transaction",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("native_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("issued_at", sa.DateTime(), nullable=True),
        sa.Column("client_addr", postgresql.INET(), nullable=True),
        sa.Column("actor_id", sa.Text(), nullable=True),
        postgresql.ExcludeConstraint(
            (sa.column("native_transaction_id"), "="),
            (sa.text("tsrange(issued_at - INTERVAL '1 hour', issued_at)"), "&&"),
            using="gist",
            name="transaction_unique_native_tx_id",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "activity",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("schema_name", sa.Text(), nullable=True),
        sa.Column("table_name", sa.Text(), nullable=True),
        sa.Column("relid", sa.Integer(), nullable=True),
        sa.Column("issued_at", sa.DateTime(), nullable=True),
        sa.Column("native_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("verb", sa.Text(), nullable=True),
        sa.Column(
            "old_data",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=True,
        ),
        sa.Column(
            "changed_data",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=True,
        ),
        sa.Column("transaction_id", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transaction.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_activity_native_transaction_id"),
        "activity",
        ["native_transaction_id"],
        unique=False,
    )
    op.add_column("amenageur", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("amenageur", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        "amenageur_created_by_id_fkey", "amenageur", "user", ["created_by_id"], ["id"]
    )
    op.create_foreign_key(
        "amenageur_updated_by_id_fkey", "amenageur", "user", ["updated_by_id"], ["id"]
    )
    op.add_column("enseigne", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("enseigne", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        "enseigne_created_by_id_fkey", "enseigne", "user", ["created_by_id"], ["id"]
    )
    op.create_foreign_key(
        "enseigne_updated_by_id_fkey", "enseigne", "user", ["updated_by_id"], ["id"]
    )
    op.add_column("group", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("group", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        "group_created_by_id_fkey", "group", "user", ["created_by_id"], ["id"]
    )
    op.create_foreign_key(
        "group_updated_by_id_fkey", "group", "user", ["updated_by_id"], ["id"]
    )
    op.add_column("localisation", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("localisation", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        "localisation_created_by_id_fkey",
        "localisation",
        "user",
        ["created_by_id"],
        ["id"],
    )
    op.create_foreign_key(
        "localisation_updated_by_id_fkey",
        "localisation",
        "user",
        ["updated_by_id"],
        ["id"],
    )
    op.add_column("operateur", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("operateur", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        "operateur_created_by_id_fkey", "operateur", "user", ["created_by_id"], ["id"]
    )
    op.create_foreign_key(
        "operateur_updated_by_id_fkey", "operateur", "user", ["updated_by_id"], ["id"]
    )
    op.add_column("pointdecharge", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("pointdecharge", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        "pointdecharge_created_by_id_fkey",
        "pointdecharge",
        "user",
        ["created_by_id"],
        ["id"],
    )
    op.create_foreign_key(
        "pointdecharge_updated_by_id_fkey",
        "pointdecharge",
        "user",
        ["updated_by_id"],
        ["id"],
    )
    op.add_column("session", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("session", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        "session_created_by_id_fkey", "session", "user", ["created_by_id"], ["id"]
    )
    op.create_foreign_key(
        "session_updated_by_id_fkey", "session", "user", ["updated_by_id"], ["id"]
    )
    op.add_column("station", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("station", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        "station_created_by_id_fkey", "station", "user", ["created_by_id"], ["id"]
    )
    op.create_foreign_key(
        "station_updated_by_id_fkey", "station", "user", ["updated_by_id"], ["id"]
    )
    op.add_column("user", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("user", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        "user_created_by_id_fkey", "user", "user", ["created_by_id"], ["id"]
    )
    op.create_foreign_key(
        "user_updated_by_id_fkey", "user", "user", ["updated_by_id"], ["id"]
    )

    # Hack with the versioning manager to manually create database database triggers
    versioning_manager.base = declarative_base(metadata=SQLModel.metadata)

    # add 'postgresql-audit' functions and operators
    connection = op.get_bind()
    for table in versioning_manager.table_listeners:
        for _trig, event in versioning_manager.table_listeners[table]:
            if isinstance(event, sa.schema.DDL):
                op.execute(event)
            else:
                event("dummy_table_argument", connection)

    tables = get_tables(connection)
    excluded = ["created_at", "updated_at"]
    versioned_tables = [
        (tables["user"], excluded + ["password"]),
        (tables["group"], excluded),
        (tables["amenageur"], excluded),
        (tables["operateur"], excluded),
        (tables["enseigne"], excluded),
        (tables["localisation"], excluded),
        (tables["station"], excluded),
        (tables["pointdecharge"], excluded),
        (tables["session"], excluded),
    ]
    for table, excluded in versioned_tables:
        op.execute(
            versioning_manager.build_audit_table_query(
                table=table,
                exclude_columns=excluded,
            )
        )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("user_updated_by_id_fkey", "user", type_="foreignkey")
    op.drop_constraint("user_created_by_id_fkey", "user", type_="foreignkey")
    op.drop_column("user", "updated_by_id")
    op.drop_column("user", "created_by_id")
    op.drop_constraint("station_updated_by_id_fkey", "station", type_="foreignkey")
    op.drop_constraint("station_created_by_id_fkey", "station", type_="foreignkey")
    op.drop_column("station", "updated_by_id")
    op.drop_column("station", "created_by_id")
    op.drop_constraint("session_updated_by_id_fkey", "session", type_="foreignkey")
    op.drop_constraint("session_created_by_id_fkey", "session", type_="foreignkey")
    op.drop_column("session", "updated_by_id")
    op.drop_column("session", "created_by_id")
    op.drop_constraint(
        "pointdecharge_updated_by_id_fkey", "pointdecharge", type_="foreignkey"
    )
    op.drop_constraint(
        "pointdecharge_created_by_id_fkey", "pointdecharge", type_="foreignkey"
    )
    op.drop_column("pointdecharge", "updated_by_id")
    op.drop_column("pointdecharge", "created_by_id")
    op.drop_constraint("operateur_updated_by_id_fkey", "operateur", type_="foreignkey")
    op.drop_constraint("operateur_created_by_id_fkey", "operateur", type_="foreignkey")
    op.drop_column("operateur", "updated_by_id")
    op.drop_column("operateur", "created_by_id")
    op.drop_constraint(
        "localisation_updated_by_id_fkey", "localisation", type_="foreignkey"
    )
    op.drop_constraint(
        "localisation_created_by_id_fkey", "localisation", type_="foreignkey"
    )
    op.drop_column("localisation", "updated_by_id")
    op.drop_column("localisation", "created_by_id")
    op.drop_constraint("group_updated_by_id_fkey", "group", type_="foreignkey")
    op.drop_constraint("group_created_by_id_fkey", "group", type_="foreignkey")
    op.drop_column("group", "updated_by_id")
    op.drop_column("group", "created_by_id")
    op.drop_constraint("enseigne_updated_by_id_fkey", "enseigne", type_="foreignkey")
    op.drop_constraint("enseigne_created_by_id_fkey", "enseigne", type_="foreignkey")
    op.drop_column("enseigne", "updated_by_id")
    op.drop_column("enseigne", "created_by_id")
    op.drop_constraint("amenageur_updated_by_id_fkey", "amenageur", type_="foreignkey")
    op.drop_constraint("amenageur_created_by_id_fkey", "amenageur", type_="foreignkey")
    op.drop_column("amenageur", "updated_by_id")
    op.drop_column("amenageur", "created_by_id")

    # Hack with the versioning manager to delete triggers
    versioning_manager.base = declarative_base(metadata=SQLModel.metadata)

    connection = op.get_bind()
    tables = get_tables(connection)
    versioned_tables = [
        tables["user"],
        tables["group"],
        tables["amenageur"],
        tables["operateur"],
        tables["enseigne"],
        tables["localisation"],
        tables["station"],
        tables["pointdecharge"],
        tables["session"],
    ]
    for table in versioned_tables:
        for trigger in (
            "audit_trigger_insert",
            "audit_trigger_update",
            "audit_trigger_delete",
        ):
            op.execute(f'DROP TRIGGER "{trigger}" ON "{table.name}" CASCADE')
    op.drop_index(op.f("ix_activity_native_transaction_id"), table_name="activity")
    op.drop_table("activity")
    op.drop_table("transaction")
